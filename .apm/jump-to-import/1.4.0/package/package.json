{"name":"jump-to-import","main":"./lib/jump-to-import","version":"1.4.0","description":"Jump to ES6 import module definitions, including methods.","keywords":[],"activationCommands":{"atom-workspace":"jump-to-import:go-to-module"},"repository":{"type":"git","url":"git+https://github.com/alexheyd/atom-jump-to-import.git"},"license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"symbols-view":"git+https://github.com/atom/symbols-view.git","find-babel-config":"^1.0.1"},"readme":"# jump-to-import package\n\n*Replacement package for the `ember-import-navigator` Atom package.*\n\nPress CTRL+ALT+E with the cursor on a CommonJS `import` path, the `import` variable, or a method on the imported namespace to open that file and jump to the relevant method, if applicable. For functions declared in the same file, it uses Atom's native `Symbols View` package.\n\n## Example\nWith the following `import` line:\n\n```javascript\n// assuming the project's name is defined as `my-project` in `package.json`\n// with cursor on, or selecting, `FooMixin` or the path, will open project-root/app/mixins/foo.js\nimport FooMixin from 'my-project/mixins/foo'\n\n// with cursor on, or selecting, bar, will open project-root/app/mixins/foo.js and jump to the bar() method\nFooMixin.bar();\n```\n\n### Plugin Settings\n\nYou can define your own path overrides in Settings.\n\nDefault overrides are:\n- `$PROJECT:app`\n- `$PROJECT/config:config`\n\nWith the above default settings (for Ember projects) we would get the following behavior:\n- `PROJECT_NAME/components/foo` -> `app/components/foo.js`\n- `PROJECT_NAME/config/environment` -> `config/environment.js`\n\n`PROJECT_NAME` in the path needs to match the project name defined in your `package.json` file in the root directory.\n\nThe package will look for a `package.json` file in every root directory of the project to determine project names.\n\nFile extension is assumed to be `.js`\n\n## .babelrc Support\n\nSupport for `babel-plugin-module-resolver` has been added, where you can have the babel module aliases used for the file lookups.\n\n```\n{\n  \"plugins\": [\n      [\"module-resolver\", {\n        \"root\": [\"./src\"],\n        \"alias\": {\n          \"utils\": \"./src/utils\"\n        }\n      }]\n    ]\n}\n```\n\nWith the above `.babelrc` file, a path of `utils/test` will resolve to `./src/utils/test.js`\n\n**Note:** The `pathOverrides` defined in `Settings` have priority over `.babelrc` aliases.\n\n## Features\n- Jump to imported file from path, variable name, or method name\n- Custom path overrides\n- `babel-plugin-module-resolver` support: loads path overrides from project's `.babelrc`\n- Multiple project root folder support\n\n## Coming Soon\n- Multiple file extension support\n- ~~Tag and path caching~~\n  - will not be caching because files and tags can be edited on the fly and cache will likely get stale\n\n## Known issues\n- Soft wrap and code folding break opening modules when cursor is in string. (atom/atom#8685)\n- Only supports one project root folder\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/alexheyd/atom-jump-to-import/issues"},"homepage":"https://github.com/alexheyd/atom-jump-to-import#readme","_id":"jump-to-import@1.4.0","_shasum":"f441a91437b99336b7b2f76aa72d6c0c1dd27f94","_resolved":"file:../d-116823-89925-ebxi7q/package.tgz","_from":"../d-116823-89925-ebxi7q/package.tgz"}